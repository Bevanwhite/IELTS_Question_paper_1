class QuestionsPaper(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question_paper = db.Column(db.String(300), nullable=False)
    question_id = db.Column(db.Integer, db.ForeignKey(
        'question.id'), nullable=False)
    date_created = db.Column(db.DateTime, nullable=False,
                             default=datetime.utcnow)

    def __repr__(self):
        return f"QuestionsPaper('{self.question_paper}','{self.question_id}','{self.date_created}')"


class Questions(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question = db.Column(db.String(300), nullable=False)
    question_type = db.Column(db, db.ForeignKey(
        'Questions_type.type'), nullable=False)
    date_created = db.Column(db.DateTime, nullable=False,
                             default=datetime.utcnow)

    def __repr__(self):
        return f"Questions('{self.id}','{self.question}','{self.date_created}')"


class QuestionsType(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    type = db.Column(db.Integer, nullable=False)

    def __repr__(self):
        return f"QuestionsType('{self.id}','{self.type}')"

CREATE TABLE Question_Paper(
	id INTEGER NOT NULL,
	question_title varchar(300) NOT NULL,
	question_id INTEGER NOT NULL,
	date_created DATETIME NOT NULL,
	user_id INTEGER NOT NULL,
	PRIMARY KEY (id),
	FOREIGN KEY (user_id) REFERENCES User(user_id)
);

CREATE TABLE Questions(
	id INTEGER NOT NULL,
	question_title varchar(300) NOT NULL,
	correct_answer varchar(300) NOT NULL,
	question_type INTEGER NOT NULL,

	date_created DATETIME NOT NULL,
	user_id INTEGER NOT NULL,
	question_id INTEGER NOT NULL,

	PRIMARY KEY (id),
	FOREIGN KEY (user_id) REFERENCES User(user_id),
	FOREIGN KEY (question_id) REFERENCES Question_Paper(id)
	FOREIGN KEY (question_type) REFERENCES Questions_Type(id)
);

CREATE TABLE Questions_Type(
	id INTEGER NOT NULL,
	question_type varchar(300) NOT NULL,
	PRIMARY KEY (id),
);
	


































